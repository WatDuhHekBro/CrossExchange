$get trailer
Shows a random trailer (and this'll pretty much be entirely in your configuration).

$money send 4 keanu

"all" subcommand and any as the error value. So fix subcommands under number or any, the arguments party at least.

Also, it's better to just leave conversion commands to each separate bot and make this one act as an API. There'll be some invoke gateway somehow. Meaning the convert command is up to the user to build.
---
CrossExchange: Load into memory and send just the amount of money.
Other Bot: Receive that variable and make necessary changes, then send a callback with the amount of money left.
CrossExchange: With the new amount of money as a parameter, set these values on your end.
---
First, test if you can activate each others' commands. A test command to make another bot send a test message.
---
I'm thinking of client.emit("crossexchange", ...), then other bots add an eventlistener for that.
---
~eco convert 500 credits mons (you get 5 mons)
~eco convert 5 mons credits (500 credits)
client.emit("crossexchange", message, 500) (credits to mons)
---
Because I know what'll happen on my side for sure. What I don't know is how currency is managed on the other side.

Test the two avatar functions for mobile.

Check how TravBot is attaching welcome events to new users (where is it actually being stored?)



Spanish or vanish
French or the trench
German or you're vermin
Dutch or it's your life you'll clutch



I should really have that template system which initializes any new keys so I don't have to make the code so ugly. And instead of having a recursive fill, just do a top level scan which is easier to comprehend anyways.

Also, add a recursive help menu, descriptions at each level and the type of command auto-generating the usage. It's of course interceptable, and for the any choices, you might just provide your own answer. For any section actually.



Profile includes the amount of times you got caught uwuing and the amount of fines you paid for it. Also, don't owo, 350 credit penalty. Whenever someone is fined, that money doesn't just disappear into thin air. The bot gets it, and the more you owo/uwu, the richer the bot gets.

Also a joke feature, if the bot gets enough owo/uwu fines, the bot can start its own market: The Anti-OWO/UWU-ing Force.



console.log should come with adding stuff into a log file.

Also, make more utility functions, like util.addMoney(), util.subtractMoney(), util.getMoney().

OwO and UwU --> UwU



Bot

Turn based battles using timed matches and having battle animations using edit message. Or using animated emojis? Keep it simple regardless.

No, you're better off just making your own game at that point.